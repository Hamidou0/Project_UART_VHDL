// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/08/2021 02:56:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    receiver
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module receiver_vlg_sample_tst(
	bclk,
	GReset,
	RxD,
	sampler_tx
);
input  bclk;
input  GReset;
input  RxD;
output sampler_tx;

reg sample;
time current_time;
always @(bclk or GReset or RxD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module receiver_vlg_check_tst (
	RDR,
	set_RDRF,
	states,
	test_out_clock4,
	test_out_clock8,
	test_out_doneshi,
	sampler_rx
);
input [7:0] RDR;
input  set_RDRF;
input [3:0] states;
input  test_out_clock4;
input  test_out_clock8;
input  test_out_doneshi;
input sampler_rx;

reg [7:0] RDR_expected;
reg  set_RDRF_expected;
reg [3:0] states_expected;
reg  test_out_clock4_expected;
reg  test_out_clock8_expected;
reg  test_out_doneshi_expected;

reg [7:0] RDR_prev;
reg  set_RDRF_prev;
reg [3:0] states_prev;
reg  test_out_clock4_prev;
reg  test_out_clock8_prev;
reg  test_out_doneshi_prev;

reg  set_RDRF_expected_prev;
reg [3:0] states_expected_prev;
reg  test_out_clock4_expected_prev;
reg  test_out_clock8_expected_prev;
reg  test_out_doneshi_expected_prev;

reg  last_set_RDRF_exp;
reg [3:0] last_states_exp;
reg  last_test_out_clock4_exp;
reg  last_test_out_clock8_exp;
reg  last_test_out_doneshi_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	RDR_prev = RDR;
	set_RDRF_prev = set_RDRF;
	states_prev = states;
	test_out_clock4_prev = test_out_clock4;
	test_out_clock8_prev = test_out_clock8;
	test_out_doneshi_prev = test_out_doneshi;
end

// update expected /o prevs

always @(trigger)
begin
	set_RDRF_expected_prev = set_RDRF_expected;
	states_expected_prev = states_expected;
	test_out_clock4_expected_prev = test_out_clock4_expected;
	test_out_clock8_expected_prev = test_out_clock8_expected;
	test_out_doneshi_expected_prev = test_out_doneshi_expected;
end



// expected set_RDRF
initial
begin
	set_RDRF_expected = 1'bX;
	set_RDRF_expected = #999000 1'b0;
end 
// expected states[ 3 ]
initial
begin
	states_expected[3] = 1'bX;
end 
// expected states[ 2 ]
initial
begin
	states_expected[2] = 1'bX;
end 
// expected states[ 1 ]
initial
begin
	states_expected[1] = 1'bX;
end 
// expected states[ 0 ]
initial
begin
	states_expected[0] = 1'bX;
end 

// expected test_out_clock4
initial
begin
	test_out_clock4_expected = 1'bX;
end 

// expected test_out_doneshi
initial
begin
	test_out_doneshi_expected = 1'bX;
end 

// expected test_out_clock8
initial
begin
	test_out_clock8_expected = 1'bX;
end 
// generate trigger
always @(RDR_expected or RDR or set_RDRF_expected or set_RDRF or states_expected or states or test_out_clock4_expected or test_out_clock4 or test_out_clock8_expected or test_out_clock8 or test_out_doneshi_expected or test_out_doneshi)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected RDR = %b | expected set_RDRF = %b | expected states = %b | expected test_out_clock4 = %b | expected test_out_clock8 = %b | expected test_out_doneshi = %b | ",RDR_expected_prev,set_RDRF_expected_prev,states_expected_prev,test_out_clock4_expected_prev,test_out_clock8_expected_prev,test_out_doneshi_expected_prev);
	$display("| real RDR = %b | real set_RDRF = %b | real states = %b | real test_out_clock4 = %b | real test_out_clock8 = %b | real test_out_doneshi = %b | ",RDR_prev,set_RDRF_prev,states_prev,test_out_clock4_prev,test_out_clock8_prev,test_out_doneshi_prev);
`endif
	if (
		( set_RDRF_expected_prev !== 1'bx ) && ( set_RDRF_prev !== set_RDRF_expected_prev )
		&& ((set_RDRF_expected_prev !== last_set_RDRF_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port set_RDRF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", set_RDRF_expected_prev);
		$display ("     Real value = %b", set_RDRF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_set_RDRF_exp = set_RDRF_expected_prev;
	end
	if (
		( states_expected_prev[0] !== 1'bx ) && ( states_prev[0] !== states_expected_prev[0] )
		&& ((states_expected_prev[0] !== last_states_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port states[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", states_expected_prev);
		$display ("     Real value = %b", states_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_states_exp[0] = states_expected_prev[0];
	end
	if (
		( states_expected_prev[1] !== 1'bx ) && ( states_prev[1] !== states_expected_prev[1] )
		&& ((states_expected_prev[1] !== last_states_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port states[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", states_expected_prev);
		$display ("     Real value = %b", states_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_states_exp[1] = states_expected_prev[1];
	end
	if (
		( states_expected_prev[2] !== 1'bx ) && ( states_prev[2] !== states_expected_prev[2] )
		&& ((states_expected_prev[2] !== last_states_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port states[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", states_expected_prev);
		$display ("     Real value = %b", states_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_states_exp[2] = states_expected_prev[2];
	end
	if (
		( states_expected_prev[3] !== 1'bx ) && ( states_prev[3] !== states_expected_prev[3] )
		&& ((states_expected_prev[3] !== last_states_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port states[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", states_expected_prev);
		$display ("     Real value = %b", states_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_states_exp[3] = states_expected_prev[3];
	end
	if (
		( test_out_clock4_expected_prev !== 1'bx ) && ( test_out_clock4_prev !== test_out_clock4_expected_prev )
		&& ((test_out_clock4_expected_prev !== last_test_out_clock4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_out_clock4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_out_clock4_expected_prev);
		$display ("     Real value = %b", test_out_clock4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_test_out_clock4_exp = test_out_clock4_expected_prev;
	end
	if (
		( test_out_clock8_expected_prev !== 1'bx ) && ( test_out_clock8_prev !== test_out_clock8_expected_prev )
		&& ((test_out_clock8_expected_prev !== last_test_out_clock8_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_out_clock8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_out_clock8_expected_prev);
		$display ("     Real value = %b", test_out_clock8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_test_out_clock8_exp = test_out_clock8_expected_prev;
	end
	if (
		( test_out_doneshi_expected_prev !== 1'bx ) && ( test_out_doneshi_prev !== test_out_doneshi_expected_prev )
		&& ((test_out_doneshi_expected_prev !== last_test_out_doneshi_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port test_out_doneshi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", test_out_doneshi_expected_prev);
		$display ("     Real value = %b", test_out_doneshi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_test_out_doneshi_exp = test_out_doneshi_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#3000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module receiver_vlg_vec_tst();
// constants                                           
// general purpose registers
reg bclk;
reg GReset;
reg RxD;
// wires                                               
wire [7:0] RDR;
wire set_RDRF;
wire [3:0] states;
wire test_out_clock4;
wire test_out_clock8;
wire test_out_doneshi;

wire sampler;                             

// assign statements (if any)                          
receiver i1 (
// port map - connection between master ports and signals/registers   
	.bclk(bclk),
	.GReset(GReset),
	.RDR(RDR),
	.RxD(RxD),
	.set_RDRF(set_RDRF),
	.states(states),
	.test_out_clock4(test_out_clock4),
	.test_out_clock8(test_out_clock8),
	.test_out_doneshi(test_out_doneshi)
);

// bclk
initial
begin
	repeat(176)
	begin
		bclk = 1'b0;
		bclk = #8500 1'b1;
		# 8500;
	end
	bclk = 1'b0;
end 

// GReset
initial
begin
	GReset = 1'b1;
	GReset = #150000 1'b0;
end 

// RxD
initial
begin
	RxD = 1'b1;
	# 300;
	repeat(4)
	begin
		RxD = 1'b0;
		RxD = #300000 1'b1;
		# 300000;
	end
	RxD = 1'b0;
	RxD = #300000 1'b1;
end 

receiver_vlg_sample_tst tb_sample (
	.bclk(bclk),
	.GReset(GReset),
	.RxD(RxD),
	.sampler_tx(sampler)
);

receiver_vlg_check_tst tb_out(
	.RDR(RDR),
	.set_RDRF(set_RDRF),
	.states(states),
	.test_out_clock4(test_out_clock4),
	.test_out_clock8(test_out_clock8),
	.test_out_doneshi(test_out_doneshi),
	.sampler_rx(sampler)
);
endmodule

